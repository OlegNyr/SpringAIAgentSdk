package ru.nyrk.agents;

import java.util.List;

/**
 * https://openai.github.io/openai-agents-python/running_agents/
 */

public interface AgentRunner {


    <T> RunResult<T> run(Agent startingAgent, Object user);


    /// Запускает рабочий процесс, начиная с указанного агента.
    /// Агент будет работать в цикле, пока не будет сгенерирован конечный выход.
    ///
    /// Цикл выполняется следующим образом:
    /// 1. Агент вызывается с указанными входными данными.
    /// 2. Если есть конечный вывод (т.е. агент выдаёт что-то типа `agent.outputType`), цикл завершается.
    /// 3. Если происходит передача управления, мы снова запускаем цикл с новым агентом.
    /// 4. В противном случае мы выполняем вызовы инструментов (если таковые имеются) и перезапускаем цикл.
    ///
    /// В двух случаях агент может сгенерировать исключение:
    /// 1. При превышении максимального количества ходов (maxTurns) возникает исключение MaxTurnsExceeded.
    /// 2. При срабатывании ограничительного барьера (guardrail tripwire) возникает исключение GuardrailTripwireTriggered.
    /// Обратите внимание, что запускаются только входные ограничительные барьеры первого агента.
    ///
    /// @param startingAgent Начальный агент для запуска.
    /// @param input         Начальные входные данные для агента. Вы можете передать одну строку для пользовательского сообщения
    ///                                                                                                                                                                                                                                                                                                                                                                                                            или список входных элементов.
    /// @param agentContext  Контекст для запуска агента.
    /// @param maxTurns      Максимальное количество ходов для запуска агента. Ход определяется как один
    ///                                                                                                                                                                                                                                                                                                                                                                                                            вызов ИИ (включая любые возможные вызовы инструментов).
    /// @param agentHooks    объект, принимающий обратные вызовы при различных событиях жизненного цикла.
    /// @param runConfig     глобальные настройки для всего запуска агента.
    /// @return результат запуска, содержащий все входные данные, результаты проверки и выходные данные последнего
    ///         агента. Агенты могут выполнять передачи, поэтому мы не знаем конкретный тип выходных данных.
    <T> RunResult<T> run(Agent startingAgent,
                         List<ResponseInputItem> input,
                         AgentContext agentContext,
                         Integer maxTurns,
                         AgentHooks agentHooks,
                         RunConfig runConfig);
}
